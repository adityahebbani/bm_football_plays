{"ast":null,"code":"import Roboflow from 'roboflow';\nimport ffmpeg from 'fluent-ffmpeg';\nimport path from 'path';\nimport fs from 'fs';\nimport { promisify } from 'util';\nconst readdir = promisify(fs.readdir);\nconst unlink = promisify(fs.unlink);\nconst readFile = promisify(fs.readFile);\nconst mkdir = promisify(fs.mkdir);\nconst exists = fs.existsSync;\n// Load your model from Roboflow\nexport const loadRoboflowModel = async () => {\n  try {\n    // Replace with your actual API key, project, model, and version details.\n    const rf = new Roboflow('hB8S8n5OlohSOI3c51ic');\n    const model = await rf.load('Boilermake 2025', 'presnaps-large-model/1', 'v1');\n    console.log('Roboflow model loaded successfully.');\n    return model;\n  } catch (err) {\n    console.error('Error loading Roboflow model:', err);\n    throw err;\n  }\n};\n\n// Analyze a video file (located at filePath) by extracting one frame per second\n// and running the Roboflow model's prediction on each frame.\nexport const analyzeVideo = async filePath => {\n  const model = await loadRoboflowModel();\n\n  // Create a temporary directory for frames\n  const framesDir = path.join(__dirname, 'temp_frames');\n  if (!exists(framesDir)) {\n    await mkdir(framesDir);\n  }\n\n  // Get video duration using ffprobe via fluent-ffmpeg\n  const getVideoDuration = () => {\n    return new Promise((resolve, reject) => {\n      ffmpeg.ffprobe(filePath, (err, metadata) => {\n        if (err) return reject(err);\n        const duration = metadata.format.duration || 0;\n        resolve(duration);\n      });\n    });\n  };\n  const duration = await getVideoDuration();\n  const results = [];\n\n  // Extract frames at 1 frame per second.\n  // Frames will be saved as \"frame-001.jpg\", \"frame-002.jpg\", etc.\n  await new Promise((resolve, reject) => {\n    ffmpeg(filePath).output(path.join(framesDir, 'frame-%03d.jpg')).outputOptions('-vf', 'fps=1').on('end', resolve).on('error', reject).run();\n  });\n\n  // Read extracted frame files from temporary directory.\n  const files = await readdir(framesDir);\n  const frameFiles = files.filter(f => f.endsWith('.jpg')).sort();\n\n  // Process each frame file.\n  for (let i = 0; i < frameFiles.length; i++) {\n    const frameFilePath = path.join(framesDir, frameFiles[i]);\n    // Assume each frame corresponds to (i + 1) seconds.\n    const timestamp = i + 1;\n    const imageBuffer = await readFile(frameFilePath);\n    const base64Image = 'data:image/jpeg;base64,' + imageBuffer.toString('base64');\n\n    // Run prediction on the frame image.\n    const prediction = await model.predict(base64Image);\n    results.push({\n      timestamp,\n      prediction\n    });\n\n    // Remove the frame file after processing.\n    await unlink(frameFilePath);\n  }\n  return results;\n};","map":{"version":3,"names":["Roboflow","ffmpeg","path","fs","promisify","readdir","unlink","readFile","mkdir","exists","existsSync","loadRoboflowModel","rf","model","load","console","log","err","error","analyzeVideo","filePath","framesDir","join","__dirname","getVideoDuration","Promise","resolve","reject","ffprobe","metadata","duration","format","results","output","outputOptions","on","run","files","frameFiles","filter","f","endsWith","sort","i","length","frameFilePath","timestamp","imageBuffer","base64Image","toString","prediction","predict","push"],"sources":["C:/Users/Adi/Files/Projects/bm_football_plays/computer-vision-webapp/src/visionModelIntegration.ts"],"sourcesContent":["import Roboflow from 'roboflow';\r\nimport ffmpeg from 'fluent-ffmpeg';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport { promisify } from 'util';\r\n\r\nconst readdir = promisify(fs.readdir);\r\nconst unlink = promisify(fs.unlink);\r\nconst readFile = promisify(fs.readFile);\r\nconst mkdir = promisify(fs.mkdir);\r\nconst exists = fs.existsSync;\r\n\r\nexport interface VideoAnalysisResult {\r\n  timestamp: number;\r\n  prediction: any;\r\n}\r\n\r\n// Load your model from Roboflow\r\nexport const loadRoboflowModel = async (): Promise<any> => {\r\n  try {\r\n    // Replace with your actual API key, project, model, and version details.\r\n    const rf = new Roboflow('hB8S8n5OlohSOI3c51ic');\r\n    const model = await rf.load('Boilermake 2025', 'presnaps-large-model/1', 'v1');\r\n    console.log('Roboflow model loaded successfully.');\r\n    return model;\r\n  } catch (err) {\r\n    console.error('Error loading Roboflow model:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// Analyze a video file (located at filePath) by extracting one frame per second\r\n// and running the Roboflow model's prediction on each frame.\r\nexport const analyzeVideo = async (filePath: string): Promise<VideoAnalysisResult[]> => {\r\n  const model = await loadRoboflowModel();\r\n\r\n  // Create a temporary directory for frames\r\n  const framesDir = path.join(__dirname, 'temp_frames');\r\n  if (!exists(framesDir)) {\r\n    await mkdir(framesDir);\r\n  }\r\n\r\n  // Get video duration using ffprobe via fluent-ffmpeg\r\n  const getVideoDuration = (): Promise<number> => {\r\n    return new Promise((resolve, reject) => {\r\n      ffmpeg.ffprobe(filePath, (err, metadata) => {\r\n        if (err) return reject(err);\r\n        const duration = metadata.format.duration || 0;\r\n        resolve(duration);\r\n      });\r\n    });\r\n  };\r\n\r\n  const duration = await getVideoDuration();\r\n  const results: VideoAnalysisResult[] = [];\r\n\r\n  // Extract frames at 1 frame per second.\r\n  // Frames will be saved as \"frame-001.jpg\", \"frame-002.jpg\", etc.\r\n  await new Promise((resolve, reject) => {\r\n    ffmpeg(filePath)\r\n      .output(path.join(framesDir, 'frame-%03d.jpg'))\r\n      .outputOptions('-vf', 'fps=1')\r\n      .on('end', resolve)\r\n      .on('error', reject)\r\n      .run();\r\n  });\r\n\r\n  // Read extracted frame files from temporary directory.\r\n  const files = await readdir(framesDir);\r\n  const frameFiles = files.filter((f) => f.endsWith('.jpg')).sort();\r\n\r\n  // Process each frame file.\r\n  for (let i = 0; i < frameFiles.length; i++) {\r\n    const frameFilePath = path.join(framesDir, frameFiles[i]);\r\n    // Assume each frame corresponds to (i + 1) seconds.\r\n    const timestamp = i + 1;\r\n    const imageBuffer = await readFile(frameFilePath);\r\n    const base64Image = 'data:image/jpeg;base64,' + imageBuffer.toString('base64');\r\n\r\n    // Run prediction on the frame image.\r\n    const prediction = await model.predict(base64Image);\r\n    results.push({ timestamp, prediction });\r\n\r\n    // Remove the frame file after processing.\r\n    await unlink(frameFilePath);\r\n  }\r\n\r\n  return results;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}