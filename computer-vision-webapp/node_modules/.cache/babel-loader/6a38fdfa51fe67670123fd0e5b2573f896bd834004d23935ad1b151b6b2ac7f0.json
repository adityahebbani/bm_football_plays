{"ast":null,"code":"```tsx\n// filepath: /Users/adity/Files/bm_front/computer-vision-webapp/src/components/Library.tsx\nimport React, { useEffect, useState } from 'react';\n\ninterface StoredVideo {\n    id: string;\n    name: string;\n    dataUrl: string;   // either base64 or a public URL\n    timestamp: number;\n    isVideo: boolean;\n}\n\n// Preloaded static videos in /public/videos.\n// You can add as many as you want here.\nconst PRELOADED_VIDEOS: StoredVideo[] = [\n    {\n        id: 'pre-1',\n        name: 'Preloaded Video 1',\n        dataUrl: '/videos/preloaded1.mp4',   // path in /public\n        timestamp: 1,                        // older timestamps so user uploads appear above\n        isVideo: true,\n    },\n    {\n        id: 'pre-2',\n        name: 'Preloaded Video 2',\n        dataUrl: '/videos/preloaded2.mp4',\n        timestamp: 2,\n        isVideo: true,\n    },\n];\n\nconst Library: React.FC = () => {\n    const [videos, setVideos] = useState<StoredVideo[]>([]);\n\n    useEffect(() => {\n        const stored = localStorage.getItem('uploadedVideos');\n        if (!stored) {\n            // If no uploaded videos exist yet, seed localStorage with the preloaded ones\n            localStorage.setItem('uploadedVideos', JSON.stringify(PRELOADED_VIDEOS));\n            setVideos(PRELOADED_VIDEOS);\n        } else {\n            // Merge user uploads with preloaded items (if not already merged)\n            const parsed = JSON.parse(stored) as StoredVideo[];\n            const merged = mergePreloadedAndStored(parsed);\n            // Sort newest first\n            merged.sort((a, b) => b.timestamp - a.timestamp);\n\n            // In case preloaded were not already merged, store them\n            localStorage.setItem('uploadedVideos', JSON.stringify(merged));\n            setVideos(merged);\n        }\n    }, []);\n\n    // Helper to ensure preloaded items are merged only once\n    function mergePreloadedAndStored(storedVideos: StoredVideo[]): StoredVideo[] {\n        const existingIds = new Set(storedVideos.map(v => v.id));\n        const merged = [...storedVideos];\n\n        PRELOADED_VIDEOS.forEach(preVid => {\n            if (!existingIds.has(preVid.id)) {\n                merged.push(preVid);\n            }\n        });\n        return merged;\n    }\n\n    return (\n        <div className=\"home-container\">\n            <h2>Video Library</h2>\n            <p>This page displays preloaded and user-uploaded videos in a blog-like format (newest first).</p>\n\n            {videos.map((vid) => (\n                <div key={vid.id} style={{ marginBottom: '2rem' }}>\n                    <h3>{vid.name}</h3>\n                    {vid.isVideo ? (\n                        <video controls width=\"600\">\n                            <source src={vid.dataUrl} type=\"video/mp4\" />\n                            Your browser does not support the video tag.\n                        </video>\n                    ) : (\n                        <img src={vid.dataUrl} alt={vid.name} width=\"600\" />\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Library;\n```;","map":{"version":3,"names":[],"sources":["/Users/adity/Files/bm_front/computer-vision-webapp/src/components/Library.tsx"],"sourcesContent":["```tsx\n// filepath: /Users/adity/Files/bm_front/computer-vision-webapp/src/components/Library.tsx\nimport React, { useEffect, useState } from 'react';\n\ninterface StoredVideo {\n    id: string;\n    name: string;\n    dataUrl: string;   // either base64 or a public URL\n    timestamp: number;\n    isVideo: boolean;\n}\n\n// Preloaded static videos in /public/videos.\n// You can add as many as you want here.\nconst PRELOADED_VIDEOS: StoredVideo[] = [\n    {\n        id: 'pre-1',\n        name: 'Preloaded Video 1',\n        dataUrl: '/videos/preloaded1.mp4',   // path in /public\n        timestamp: 1,                        // older timestamps so user uploads appear above\n        isVideo: true,\n    },\n    {\n        id: 'pre-2',\n        name: 'Preloaded Video 2',\n        dataUrl: '/videos/preloaded2.mp4',\n        timestamp: 2,\n        isVideo: true,\n    },\n];\n\nconst Library: React.FC = () => {\n    const [videos, setVideos] = useState<StoredVideo[]>([]);\n\n    useEffect(() => {\n        const stored = localStorage.getItem('uploadedVideos');\n        if (!stored) {\n            // If no uploaded videos exist yet, seed localStorage with the preloaded ones\n            localStorage.setItem('uploadedVideos', JSON.stringify(PRELOADED_VIDEOS));\n            setVideos(PRELOADED_VIDEOS);\n        } else {\n            // Merge user uploads with preloaded items (if not already merged)\n            const parsed = JSON.parse(stored) as StoredVideo[];\n            const merged = mergePreloadedAndStored(parsed);\n            // Sort newest first\n            merged.sort((a, b) => b.timestamp - a.timestamp);\n\n            // In case preloaded were not already merged, store them\n            localStorage.setItem('uploadedVideos', JSON.stringify(merged));\n            setVideos(merged);\n        }\n    }, []);\n\n    // Helper to ensure preloaded items are merged only once\n    function mergePreloadedAndStored(storedVideos: StoredVideo[]): StoredVideo[] {\n        const existingIds = new Set(storedVideos.map(v => v.id));\n        const merged = [...storedVideos];\n\n        PRELOADED_VIDEOS.forEach(preVid => {\n            if (!existingIds.has(preVid.id)) {\n                merged.push(preVid);\n            }\n        });\n        return merged;\n    }\n\n    return (\n        <div className=\"home-container\">\n            <h2>Video Library</h2>\n            <p>This page displays preloaded and user-uploaded videos in a blog-like format (newest first).</p>\n\n            {videos.map((vid) => (\n                <div key={vid.id} style={{ marginBottom: '2rem' }}>\n                    <h3>{vid.name}</h3>\n                    {vid.isVideo ? (\n                        <video controls width=\"600\">\n                            <source src={vid.dataUrl} type=\"video/mp4\" />\n                            Your browser does not support the video tag.\n                        </video>\n                    ) : (\n                        <img src={vid.dataUrl} alt={vid.name} width=\"600\" />\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Library;\n```"],"mappings":"AAAA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}