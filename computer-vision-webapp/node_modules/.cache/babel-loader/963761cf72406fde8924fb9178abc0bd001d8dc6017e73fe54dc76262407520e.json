{"ast":null,"code":"import axios from 'axios';\nimport Roboflow from 'roboflow';\nconst API_URL = 'http://your-api-endpoint.com/predict'; // Replace with your actual API endpoint\n\n// Initialize Roboflow instance with your API key\nconst rf = new Roboflow('hB8S8n5OlohSOI3c51ic'); // Replace with your actual API key\n\n// Load your model from Roboflow\nexport const loadRoboflowModel = async () => {\n  try {\n    // Replace with your actual project/model details.\n    const model = await rf.load('Boilermake 2025', 'presnaps-large-model/1', 'v1');\n    console.log('Roboflow model loaded successfully.');\n    return model;\n  } catch (err) {\n    console.error('Error loading Roboflow model:', err);\n    throw err;\n  }\n};\nexport const analyzeMedia = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post(API_URL, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data; // Assuming the response contains the prediction data\n  } catch (error) {\n    console.error('Error analyzing media:', error);\n    throw error; // Rethrow the error for handling in the component\n  }\n};\n\n// Define an interface to store predictions with timestamp\n\n// Analyze video frames using the loaded model.\n// This function extracts frames at 1-second intervals and runs predictions for each.\nexport const analyzeVideo = async file => {\n  const model = await loadRoboflowModel(); // Ensure the model is loaded\n\n  // Create a hidden video element\n  const video = document.createElement('video');\n  video.src = URL.createObjectURL(file);\n  video.muted = true; // Mute to prevent playback issues\n  video.playsInline = true; // iOS compatibility\n\n  // Wait until metadata is loaded\n  await new Promise(resolve => {\n    video.onloadedmetadata = () => {\n      resolve(true);\n    };\n  });\n  const duration = video.duration;\n  const results = [];\n\n  // Set up a canvas to extract frames\n  const canvas = document.createElement('canvas');\n  canvas.width = video.videoWidth;\n  canvas.height = video.videoHeight;\n  const context = canvas.getContext('2d');\n  if (!context) {\n    throw new Error('Could not get canvas context');\n  }\n\n  // Define frame extraction interval in seconds (e.g., 1 frame per second)\n  const interval = 1;\n  for (let t = 0; t <= duration; t += interval) {\n    await new Promise(resolve => {\n      video.currentTime = t;\n      video.onseeked = () => resolve(true);\n    });\n\n    // Draw the current frame to canvas\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    // Convert the canvas content to a base64 image\n    const imageData = canvas.toDataURL('image/jpeg');\n\n    // Run prediction on the frame image. Adjust the predict parameters as needed.\n    const prediction = await model.predict(imageData);\n    results.push({\n      timestamp: t,\n      prediction\n    });\n  }\n  return results;\n};","map":{"version":3,"names":["axios","Roboflow","API_URL","rf","loadRoboflowModel","model","load","console","log","err","error","analyzeMedia","file","formData","FormData","append","response","post","headers","data","analyzeVideo","video","document","createElement","src","URL","createObjectURL","muted","playsInline","Promise","resolve","onloadedmetadata","duration","results","canvas","width","videoWidth","height","videoHeight","context","getContext","Error","interval","t","currentTime","onseeked","drawImage","imageData","toDataURL","prediction","predict","push","timestamp"],"sources":["C:/Users/Adi/Files/Projects/bm_football_plays/computer-vision-webapp/src/visionModelIntegration.ts"],"sourcesContent":["import axios from 'axios';\r\nimport Roboflow from 'roboflow';\r\n\r\nconst API_URL = 'http://your-api-endpoint.com/predict'; // Replace with your actual API endpoint\r\n\r\n// Initialize Roboflow instance with your API key\r\nconst rf = new Roboflow('hB8S8n5OlohSOI3c51ic'); // Replace with your actual API key\r\n\r\n// Load your model from Roboflow\r\nexport const loadRoboflowModel = async () => {\r\n    try {\r\n        // Replace with your actual project/model details.\r\n        const model = await rf.load('Boilermake 2025', 'presnaps-large-model/1', 'v1');\r\n        console.log('Roboflow model loaded successfully.');\r\n        return model;\r\n    } catch (err) {\r\n        console.error('Error loading Roboflow model:', err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const analyzeMedia = async (file: File): Promise<any> => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n        const response = await axios.post(API_URL, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data; // Assuming the response contains the prediction data\r\n    } catch (error) {\r\n        console.error('Error analyzing media:', error);\r\n        throw error; // Rethrow the error for handling in the component\r\n    }\r\n};\r\n\r\n// Define an interface to store predictions with timestamp\r\nexport interface VideoAnalysisResult {\r\n    timestamp: number;\r\n    prediction: any;\r\n}\r\n\r\n// Analyze video frames using the loaded model.\r\n// This function extracts frames at 1-second intervals and runs predictions for each.\r\nexport const analyzeVideo = async (file: File): Promise<VideoAnalysisResult[]> => {\r\n    const model = await loadRoboflowModel(); // Ensure the model is loaded\r\n\r\n    // Create a hidden video element\r\n    const video = document.createElement('video');\r\n    video.src = URL.createObjectURL(file);\r\n    video.muted = true; // Mute to prevent playback issues\r\n    video.playsInline = true; // iOS compatibility\r\n\r\n    // Wait until metadata is loaded\r\n    await new Promise((resolve) => {\r\n        video.onloadedmetadata = () => {\r\n            resolve(true);\r\n        };\r\n    });\r\n\r\n    const duration = video.duration;\r\n    const results: VideoAnalysisResult[] = [];\r\n\r\n    // Set up a canvas to extract frames\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const context = canvas.getContext('2d');\r\n    if (!context) {\r\n        throw new Error('Could not get canvas context');\r\n    }\r\n\r\n    // Define frame extraction interval in seconds (e.g., 1 frame per second)\r\n    const interval = 1;\r\n\r\n    for (let t = 0; t <= duration; t += interval) {\r\n        await new Promise((resolve) => {\r\n            video.currentTime = t;\r\n            video.onseeked = () => resolve(true);\r\n        });\r\n\r\n        // Draw the current frame to canvas\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        // Convert the canvas content to a base64 image\r\n        const imageData = canvas.toDataURL('image/jpeg');\r\n\r\n        // Run prediction on the frame image. Adjust the predict parameters as needed.\r\n        const prediction = await model.predict(imageData);\r\n        results.push({ timestamp: t, prediction });\r\n    }\r\n\r\n    return results;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}