{"ast":null,"code":"import axios from'axios';import Roboflow from'roboflow';const API_URL='http://your-api-endpoint.com/predict';// Replace with your actual API endpoint\n// Initialize Roboflow instance with your API key\nconst rf=new Roboflow('hB8S8n5OlohSOI3c51ic');// Replace with your actual API key\n// Load your model from Roboflow\nexport const loadRoboflowModel=async()=>{try{// Replace with your actual project/model details.\nconst model=await rf.load('Boilermake 2025','presnaps-large-model/1','v1');console.log('Roboflow model loaded successfully.');return model;}catch(err){console.error('Error loading Roboflow model:',err);throw err;}};export const analyzeMedia=async file=>{const formData=new FormData();formData.append('file',file);try{const response=await axios.post(API_URL,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;// Assuming the response contains the prediction data\n}catch(error){console.error('Error analyzing media:',error);throw error;// Rethrow the error for handling in the component\n}};// Define an interface to store predictions with timestamp\n// Analyze video frames using the loaded model.\n// This function extracts frames at 1-second intervals and runs predictions for each.\nexport const analyzeVideo=async file=>{const model=await loadRoboflowModel();// Ensure the model is loaded\n// Create a hidden video element\nconst video=document.createElement('video');video.src=URL.createObjectURL(file);video.muted=true;// Mute to prevent playback issues\nvideo.playsInline=true;// iOS compatibility\n// Wait until metadata is loaded\nawait new Promise(resolve=>{video.onloadedmetadata=()=>{resolve(true);};});const duration=video.duration;const results=[];// Set up a canvas to extract frames\nconst canvas=document.createElement('canvas');canvas.width=video.videoWidth;canvas.height=video.videoHeight;const context=canvas.getContext('2d');if(!context){throw new Error('Could not get canvas context');}// Define frame extraction interval in seconds (e.g., 1 frame per second)\nconst interval=1;for(let t=0;t<=duration;t+=interval){await new Promise(resolve=>{video.currentTime=t;video.onseeked=()=>resolve(true);});// Draw the current frame to canvas\ncontext.drawImage(video,0,0,canvas.width,canvas.height);// Convert the canvas content to a base64 image\nconst imageData=canvas.toDataURL('image/jpeg');// Run prediction on the frame image. Adjust the predict parameters as needed.\nconst prediction=await model.predict(imageData);results.push({timestamp:t,prediction});}return results;};","map":{"version":3,"names":["axios","Roboflow","API_URL","rf","loadRoboflowModel","model","load","console","log","err","error","analyzeMedia","file","formData","FormData","append","response","post","headers","data","analyzeVideo","video","document","createElement","src","URL","createObjectURL","muted","playsInline","Promise","resolve","onloadedmetadata","duration","results","canvas","width","videoWidth","height","videoHeight","context","getContext","Error","interval","t","currentTime","onseeked","drawImage","imageData","toDataURL","prediction","predict","push","timestamp"],"sources":["C:/Users/Adi/Files/Projects/bm_football_plays/computer-vision-webapp/src/visionModelIntegration.ts"],"sourcesContent":["import axios from 'axios';\r\nimport Roboflow from 'roboflow';\r\n\r\nconst API_URL = 'http://your-api-endpoint.com/predict'; // Replace with your actual API endpoint\r\n\r\n// Initialize Roboflow instance with your API key\r\nconst rf = new Roboflow('hB8S8n5OlohSOI3c51ic'); // Replace with your actual API key\r\n\r\n// Load your model from Roboflow\r\nexport const loadRoboflowModel = async () => {\r\n    try {\r\n        // Replace with your actual project/model details.\r\n        const model = await rf.load('Boilermake 2025', 'presnaps-large-model/1', 'v1');\r\n        console.log('Roboflow model loaded successfully.');\r\n        return model;\r\n    } catch (err) {\r\n        console.error('Error loading Roboflow model:', err);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const analyzeMedia = async (file: File): Promise<any> => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n        const response = await axios.post(API_URL, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data; // Assuming the response contains the prediction data\r\n    } catch (error) {\r\n        console.error('Error analyzing media:', error);\r\n        throw error; // Rethrow the error for handling in the component\r\n    }\r\n};\r\n\r\n// Define an interface to store predictions with timestamp\r\nexport interface VideoAnalysisResult {\r\n    timestamp: number;\r\n    prediction: any;\r\n}\r\n\r\n// Analyze video frames using the loaded model.\r\n// This function extracts frames at 1-second intervals and runs predictions for each.\r\nexport const analyzeVideo = async (file: File): Promise<VideoAnalysisResult[]> => {\r\n    const model = await loadRoboflowModel(); // Ensure the model is loaded\r\n\r\n    // Create a hidden video element\r\n    const video = document.createElement('video');\r\n    video.src = URL.createObjectURL(file);\r\n    video.muted = true; // Mute to prevent playback issues\r\n    video.playsInline = true; // iOS compatibility\r\n\r\n    // Wait until metadata is loaded\r\n    await new Promise((resolve) => {\r\n        video.onloadedmetadata = () => {\r\n            resolve(true);\r\n        };\r\n    });\r\n\r\n    const duration = video.duration;\r\n    const results: VideoAnalysisResult[] = [];\r\n\r\n    // Set up a canvas to extract frames\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const context = canvas.getContext('2d');\r\n    if (!context) {\r\n        throw new Error('Could not get canvas context');\r\n    }\r\n\r\n    // Define frame extraction interval in seconds (e.g., 1 frame per second)\r\n    const interval = 1;\r\n\r\n    for (let t = 0; t <= duration; t += interval) {\r\n        await new Promise((resolve) => {\r\n            video.currentTime = t;\r\n            video.onseeked = () => resolve(true);\r\n        });\r\n\r\n        // Draw the current frame to canvas\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        // Convert the canvas content to a base64 image\r\n        const imageData = canvas.toDataURL('image/jpeg');\r\n\r\n        // Run prediction on the frame image. Adjust the predict parameters as needed.\r\n        const prediction = await model.predict(imageData);\r\n        results.push({ timestamp: t, prediction });\r\n    }\r\n\r\n    return results;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}